[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 RPackage2 authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Taylor Ikner. Author, contributor. J Kyle Armstrong. Author, maintainer, contributor, data contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ikner T, Armstrong J (2024). RPackage2: Example R package containing R6 S4 classes. R package version 0.1.0.","code":"@Manual{,   title = {RPackage2: Example of an R package containing both R6 and S4 classes},   author = {Taylor Ikner and J Kyle Armstrong},   year = {2024},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"rpackage2","dir":"","previous_headings":"","what":"Example of an R package containing both R6 and S4 classes","title":"Example of an R package containing both R6 and S4 classes","text":"goal RPackage2 provide examples create R package. RPackage2 currently version 0.1.0 last built 17-June-2024. includes functions addition, multiplication, rolling dice, flipping coins, well functions utilized class counting missing columns. also includes R6::R6Class S4 version deck cards create deck cards, shuffling deck, drawing cards deck.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Example of an R package containing both R6 and S4 classes","text":"can install development version RPackage2 GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"jkylearmstrong/RPackage2\")"},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Example of an R package containing both R6 and S4 classes","text":"basic examples:","code":"library(RPackage2)"},{"path":"/index.html","id":"arithmetic","dir":"","previous_headings":"Example","what":"Arithmetic","title":"Example of an R package containing both R6 and S4 classes","text":"","code":"addition(1,2) #> [1] 3 multiplication(5,-4) #> [1] -20 multiplication(pi, complex(1,0,1)) |>   exp() |>   addition(1) # essentially 0, error due to floating point arithmetic #> [1] 0+1.224647e-16i"},{"path":"/index.html","id":"data-analysis","dir":"","previous_headings":"Example","what":"Data Analysis","title":"Example of an R package containing both R6 and S4 classes","text":"","code":"mtcars |>   missing_at_random() |>   features_percent_miss() #> # A tibble: 11 × 5 #>    feature SumNa SumComp PctNa PctComp #>    <chr>   <int>   <int> <dbl>   <dbl> #>  1 gear       14      18 0.438   0.562 #>  2 mpg        11      21 0.344   0.656 #>  3 qsec       11      21 0.344   0.656 #>  4 am         11      21 0.344   0.656 #>  5 carb       11      21 0.344   0.656 #>  6 drat       10      22 0.312   0.688 #>  7 vs         10      22 0.312   0.688 #>  8 hp          8      24 0.25    0.75  #>  9 cyl         7      25 0.219   0.781 #> 10 disp        6      26 0.188   0.812 #> 11 wt          6      26 0.188   0.812 mtcars |>   missing_at_random() |>   features_percent_miss() |>   plot() mtcars |>   missing_at_random() |>   missmap()"},{"path":"/index.html","id":"coin-and-dice","dir":"","previous_headings":"Example","what":"Coin and Dice","title":"Example of an R package containing both R6 and S4 classes","text":"","code":"# Flip a coin 10 times coin_flip(10) #>  [1] \"Heads\" \"Tails\" \"Tails\" \"Heads\" \"Heads\" \"Tails\" \"Heads\" \"Tails\" \"Tails\" #> [10] \"Tails\" # Roll a 3-sided die 10 times roll_dice(sides = 3, rolls = 10) #>  [1] 1 1 2 2 1 1 3 2 3 3"},{"path":"/index.html","id":"deck-of-cards-r6","dir":"","previous_headings":"Example","what":"Deck of Cards (R6)","title":"Example of an R package containing both R6 and S4 classes","text":"","code":"# Create a new deck my_deck <- DeckOfCards$new()  # Shuffle the deck my_deck$reshuffle()  # Draw cards drawn_cards1 <- my_deck$draw(5)  # Print drawn cards print(my_deck$drawn) #>     Card     Suit #> 18     5 Diamonds #> 3      3   Hearts #> 17     4 Diamonds #> 51 Queen   Spades #> 14   Ace Diamonds # should be the same drawn_cards1 == my_deck$drawn #>    Card Suit #> 18 TRUE TRUE #> 3  TRUE TRUE #> 17 TRUE TRUE #> 51 TRUE TRUE #> 14 TRUE TRUE # Draw more cards drawn_cards2 <- my_deck$draw(3)  # should be the same rbind(drawn_cards1, drawn_cards2) == my_deck$drawn #>    Card Suit #> 18 TRUE TRUE #> 3  TRUE TRUE #> 17 TRUE TRUE #> 51 TRUE TRUE #> 14 TRUE TRUE #> 45 TRUE TRUE #> 6  TRUE TRUE #> 20 TRUE TRUE # Print drawn cards print(my_deck$drawn) #>     Card     Suit #> 18     5 Diamonds #> 3      3   Hearts #> 17     4 Diamonds #> 51 Queen   Spades #> 14   Ace Diamonds #> 45     6   Spades #> 6      6   Hearts #> 20     7 Diamonds"},{"path":"/index.html","id":"deck-of-cards-s4","dir":"","previous_headings":"Example","what":"Deck of Cards (S4)","title":"Example of an R package containing both R6 and S4 classes","text":"","code":"# Create a new deck deck <- new(\"DeckOfCards4\", setofcards = createDeck())  # Shuffle the deck shuffled_deck <- shuffle(deck)  head(shuffled_deck@setofcards) #>    Card     Suit #> 1   Ace   Hearts #> 36   10    Clubs #> 31    5    Clubs #> 16    3 Diamonds #> 8     8   Hearts #> 4     4   Hearts # Draw cards  result <- draw(deck, deck, 5)  # Print drawn cards result #> $drawn #>    Card     Suit #> 20    7 Diamonds #> 49   10   Spades #> 5     5   Hearts #> 28    2    Clubs #> 21    8 Diamonds #>  #> $object #> An object of class \"DeckOfCards4\" #> Slot \"setofcards\": #>     Card     Suit #> 38 Queen    Clubs #> 32     6    Clubs #> 52  King   Spades #> 39  King    Clubs #> 6      6   Hearts #> 36    10    Clubs #> 2      2   Hearts #> 44     5   Spades #> 50  Jack   Spades #> 3      3   Hearts #> 27   Ace    Clubs #> 31     5    Clubs #> 7      7   Hearts #> 33     7    Clubs #> 11  Jack   Hearts #> 23    10 Diamonds #> 9      9   Hearts #> 18     5 Diamonds #> 1    Ace   Hearts #> 24  Jack Diamonds #> 41     2   Spades #> 45     6   Spades #> 37  Jack    Clubs #> 25 Queen Diamonds #> 17     4 Diamonds #> 29     3    Clubs #> 46     7   Spades #> 13  King   Hearts #> 16     3 Diamonds #> 26  King Diamonds #> 22     9 Diamonds #> 34     8    Clubs #> 15     2 Diamonds #> 10    10   Hearts #> 14   Ace Diamonds #> 43     4   Spades #> 51 Queen   Spades #> 40   Ace   Spades #> 4      4   Hearts #> 48     9   Spades #> 8      8   Hearts #> 19     6 Diamonds #> 35     9    Clubs #> 12 Queen   Hearts #> 30     4    Clubs #> 42     3   Spades #> 47     8   Spades"},{"path":"/reference/BootOfDecks.html","id":null,"dir":"Reference","previous_headings":"","what":"Boot of Decks — BootOfDecks","title":"Boot of Decks — BootOfDecks","text":"Boot Decks Boot Decks","code":""},{"path":"/reference/BootOfDecks.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boot of Decks — BootOfDecks","text":"R6 class simulates boot decks allows drawing reshuffling.","code":""},{"path":"/reference/BootOfDecks.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Boot of Decks — BootOfDecks","text":"deck list DeckOfCards objects. drawn data frame representing drawn cards.","code":""},{"path":[]},{"path":"/reference/BootOfDecks.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Boot of Decks — BootOfDecks","text":"BootOfDecks$new() BootOfDecks$reshuffle() BootOfDecks$draw() BootOfDecks$solitaire() BootOfDecks$clone()","code":""},{"path":"/reference/BootOfDecks.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Boot of Decks — BootOfDecks","text":"Initialize boot decks.","code":""},{"path":"/reference/BootOfDecks.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boot of Decks — BootOfDecks","text":"","code":"BootOfDecks$new(number_of_decks, use_jokers = FALSE)"},{"path":"/reference/BootOfDecks.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boot of Decks — BootOfDecks","text":"number_of_decks number decks boot. use_jokers logical value indicating whether include jokers boot.","code":""},{"path":"/reference/BootOfDecks.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Boot of Decks — BootOfDecks","text":"list DeckOfCards objects.","code":""},{"path":"/reference/BootOfDecks.html","id":"method-reshuffle-","dir":"Reference","previous_headings":"","what":"Method reshuffle()","title":"Boot of Decks — BootOfDecks","text":"Reshuffle boot decks.","code":""},{"path":"/reference/BootOfDecks.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Boot of Decks — BootOfDecks","text":"","code":"BootOfDecks$reshuffle()"},{"path":"/reference/BootOfDecks.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Boot of Decks — BootOfDecks","text":"data frame representing reshuffled boot decks.","code":""},{"path":"/reference/BootOfDecks.html","id":"method-draw-","dir":"Reference","previous_headings":"","what":"Method draw()","title":"Boot of Decks — BootOfDecks","text":"Draw specified number cards boot.","code":""},{"path":"/reference/BootOfDecks.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Boot of Decks — BootOfDecks","text":"","code":"BootOfDecks$draw(draws = 1)"},{"path":"/reference/BootOfDecks.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boot of Decks — BootOfDecks","text":"draws number cards draw boot.","code":""},{"path":"/reference/BootOfDecks.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Boot of Decks — BootOfDecks","text":"data frame representing drawn cards.","code":""},{"path":"/reference/BootOfDecks.html","id":"method-solitaire-","dir":"Reference","previous_headings":"","what":"Method solitaire()","title":"Boot of Decks — BootOfDecks","text":"sort deck cards.","code":""},{"path":"/reference/BootOfDecks.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Boot of Decks — BootOfDecks","text":"","code":"BootOfDecks$solitaire(hand = \"deck\")"},{"path":"/reference/BootOfDecks.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boot of Decks — BootOfDecks","text":"hand either deck drawn hand.","code":""},{"path":"/reference/BootOfDecks.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Boot of Decks — BootOfDecks","text":"data frame representing sorted deck cards.","code":""},{"path":"/reference/BootOfDecks.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Boot of Decks — BootOfDecks","text":"objects class cloneable method.","code":""},{"path":"/reference/BootOfDecks.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Boot of Decks — BootOfDecks","text":"","code":"BootOfDecks$clone(deep = FALSE)"},{"path":"/reference/BootOfDecks.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boot of Decks — BootOfDecks","text":"deep Whether make deep clone.","code":""},{"path":"/reference/BootOfDecks.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boot of Decks — BootOfDecks","text":"","code":"# Create a new boot of decks my_boot <- BootOfDecks$new(2) drawn_cards1 <- my_boot$draw(5) # Print drawn cards print(drawn_cards1) #>     Card     Suit #> 24  Jack Diamonds #> 36    10    Clubs #> 50  Jack   Spades #> 291    3    Clubs #> 171    4 Diamonds # should be the same drawn_cards1 == my_boot$drawn #>     Card Suit #> 24  TRUE TRUE #> 36  TRUE TRUE #> 50  TRUE TRUE #> 291 TRUE TRUE #> 171 TRUE TRUE # Draw more cards drawn_cards2 <- my_boot$draw(5) # should be the same rbind(drawn_cards1,drawn_cards2) == my_boot$drawn #>     Card Suit #> 24  TRUE TRUE #> 36  TRUE TRUE #> 50  TRUE TRUE #> 291 TRUE TRUE #> 171 TRUE TRUE #> 30  TRUE TRUE #> 511 TRUE TRUE #> 19  TRUE TRUE #> 451 TRUE TRUE #> 351 TRUE TRUE # Print remaining cards print(my_boot$deck) #>      Card     Suit #> 23     10 Diamonds #> 51  Queen   Spades #> 42      3   Spades #> 49     10   Spades #> 8       8   Hearts #> 5       5   Hearts #> 41      2   Spades #> 29      3    Clubs #> 46      7   Spades #> 21      8 Diamonds #> 18      5 Diamonds #> 45      6   Spades #> 38  Queen    Clubs #> 47      8   Spades #> 44      5   Spades #> 20      7 Diamonds #> 6       6   Hearts #> 15      2 Diamonds #> 10     10   Hearts #> 4       4   Hearts #> 31      5    Clubs #> 3       3   Hearts #> 17      4 Diamonds #> 13   King   Hearts #> 27    Ace    Clubs #> 39   King    Clubs #> 37   Jack    Clubs #> 35      9    Clubs #> 14    Ace Diamonds #> 22      9 Diamonds #> 33      7    Clubs #> 11   Jack   Hearts #> 2       2   Hearts #> 48      9   Spades #> 32      6    Clubs #> 52   King   Spades #> 25  Queen Diamonds #> 16      3 Diamonds #> 1     Ace   Hearts #> 12  Queen   Hearts #> 7       7   Hearts #> 34      8    Clubs #> 40    Ace   Spades #> 43      4   Spades #> 28      2    Clubs #> 9       9   Hearts #> 26   King Diamonds #> 231    10 Diamonds #> 421     3   Spades #> 491    10   Spades #> 81      8   Hearts #> 53      5   Hearts #> 411     2   Spades #> 461     7   Spades #> 211     8 Diamonds #> 181     5 Diamonds #> 381 Queen    Clubs #> 471     8   Spades #> 441     5   Spades #> 201     7 Diamonds #> 61      6   Hearts #> 151     2 Diamonds #> 101    10   Hearts #> 410     4   Hearts #> 311     5    Clubs #> 310     3   Hearts #> 131  King   Hearts #> 271   Ace    Clubs #> 391  King    Clubs #> 371  Jack    Clubs #> 141   Ace Diamonds #> 221     9 Diamonds #> 331     7    Clubs #> 111  Jack   Hearts #> 210     2   Hearts #> 481     9   Spades #> 321     6    Clubs #> 521  King   Spades #> 251 Queen Diamonds #> 161     3 Diamonds #> 110   Ace   Hearts #> 121 Queen   Hearts #> 71      7   Hearts #> 341     8    Clubs #> 501  Jack   Spades #> 191     6 Diamonds #> 241  Jack Diamonds #> 401   Ace   Spades #> 301     4    Clubs #> 431     4   Spades #> 281     2    Clubs #> 91      9   Hearts #> 361    10    Clubs #> 261  King Diamonds # Reshuffle the boot my_boot$reshuffle() # should be empty print(my_boot$drawn) #> data frame with 0 columns and 0 rows"},{"path":"/reference/BootOfDecks4.html","id":null,"dir":"Reference","previous_headings":"","what":"Boot of Decks Class — BootOfDecks4","title":"Boot of Decks Class — BootOfDecks4","text":"class representing collection (boot) multiple decks cards.","code":""},{"path":"/reference/BootOfDecks4.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Boot of Decks Class — BootOfDecks4","text":"decks SetOfCards object.","code":""},{"path":"/reference/DeckOfCards.html","id":null,"dir":"Reference","previous_headings":"","what":"DeckOfCards — DeckOfCards","title":"DeckOfCards — DeckOfCards","text":"R6 class simulates deck cards allows drawing reshuffling.","code":""},{"path":"/reference/DeckOfCards.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DeckOfCards — DeckOfCards","text":"Deck Cards R6 class simulates deck cards allows drawing reshuffling.","code":""},{"path":"/reference/DeckOfCards.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"DeckOfCards — DeckOfCards","text":"deck data frame representing deck cards. drawn data frame representing drawn cards.","code":""},{"path":[]},{"path":"/reference/DeckOfCards.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"DeckOfCards — DeckOfCards","text":"DeckOfCards$new() DeckOfCards$draw() DeckOfCards$reshuffle() DeckOfCards$solitaire() DeckOfCards$clone()","code":""},{"path":"/reference/DeckOfCards.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"DeckOfCards — DeckOfCards","text":"Initialize deck cards.","code":""},{"path":"/reference/DeckOfCards.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DeckOfCards — DeckOfCards","text":"","code":"DeckOfCards$new(use_jokers = FALSE)"},{"path":"/reference/DeckOfCards.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DeckOfCards — DeckOfCards","text":"use_jokers logical value indicating whether include jokers deck.","code":""},{"path":"/reference/DeckOfCards.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"DeckOfCards — DeckOfCards","text":"data frame representing deck cards.","code":""},{"path":"/reference/DeckOfCards.html","id":"method-draw-","dir":"Reference","previous_headings":"","what":"Method draw()","title":"DeckOfCards — DeckOfCards","text":"Draw specified number cards deck.","code":""},{"path":"/reference/DeckOfCards.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"DeckOfCards — DeckOfCards","text":"","code":"DeckOfCards$draw(draws = 1)"},{"path":"/reference/DeckOfCards.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"DeckOfCards — DeckOfCards","text":"draws number cards draw deck.","code":""},{"path":"/reference/DeckOfCards.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"DeckOfCards — DeckOfCards","text":"data frame representing drawn cards.","code":""},{"path":"/reference/DeckOfCards.html","id":"method-reshuffle-","dir":"Reference","previous_headings":"","what":"Method reshuffle()","title":"DeckOfCards — DeckOfCards","text":"Reshuffle deck cards.","code":""},{"path":"/reference/DeckOfCards.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"DeckOfCards — DeckOfCards","text":"","code":"DeckOfCards$reshuffle()"},{"path":"/reference/DeckOfCards.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"DeckOfCards — DeckOfCards","text":"data frame representing reshuffled deck cards.","code":""},{"path":"/reference/DeckOfCards.html","id":"method-solitaire-","dir":"Reference","previous_headings":"","what":"Method solitaire()","title":"DeckOfCards — DeckOfCards","text":"sort deck cards.","code":""},{"path":"/reference/DeckOfCards.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"DeckOfCards — DeckOfCards","text":"","code":"DeckOfCards$solitaire(hand = \"deck\")"},{"path":"/reference/DeckOfCards.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"DeckOfCards — DeckOfCards","text":"hand either deck drawn hand.","code":""},{"path":"/reference/DeckOfCards.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"DeckOfCards — DeckOfCards","text":"data frame representing sorted deck cards.","code":""},{"path":"/reference/DeckOfCards.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"DeckOfCards — DeckOfCards","text":"objects class cloneable method.","code":""},{"path":"/reference/DeckOfCards.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"DeckOfCards — DeckOfCards","text":"","code":"DeckOfCards$clone(deep = FALSE)"},{"path":"/reference/DeckOfCards.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"DeckOfCards — DeckOfCards","text":"deep Whether make deep clone.","code":""},{"path":"/reference/DeckOfCards.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DeckOfCards — DeckOfCards","text":"","code":"# Create a new deck my_deck <- DeckOfCards$new() # Shuffle the deck my_deck$reshuffle() # Draw cards drawn_cards1 <- my_deck$draw(5) # Print drawn cards print(my_deck$drawn) #>    Card   Suit #> 4     4 Hearts #> 1   Ace Hearts #> 41    2 Spades #> 50 Jack Spades #> 29    3  Clubs # should be the same drawn_cards1 == my_deck$drawn #>    Card Suit #> 4  TRUE TRUE #> 1  TRUE TRUE #> 41 TRUE TRUE #> 50 TRUE TRUE #> 29 TRUE TRUE # Draw more cards drawn_cards2 <- my_deck$draw(3) # should be the same rbind(drawn_cards1, drawn_cards2) == my_deck$drawn #>    Card Suit #> 4  TRUE TRUE #> 1  TRUE TRUE #> 41 TRUE TRUE #> 50 TRUE TRUE #> 29 TRUE TRUE #> 5  TRUE TRUE #> 21 TRUE TRUE #> 13 TRUE TRUE # Print drawn cards print(my_deck$drawn) #>    Card     Suit #> 4     4   Hearts #> 1   Ace   Hearts #> 41    2   Spades #> 50 Jack   Spades #> 29    3    Clubs #> 5     5   Hearts #> 21    8 Diamonds #> 13 King   Hearts # Check number of cards nrow(rbind(drawn_cards1, drawn_cards2)) + nrow(my_deck$deck) == 52 #> [1] TRUE # Reshuffle the deck my_deck$reshuffle() nrow(my_deck$deck) == 52 #> [1] TRUE nrow(my_deck$drawn) == 0 #> [1] TRUE # draw 40 cards drawn_cards3 <- my_deck$draw(40) # sort the remaining cards my_deck$solitaire(\"deck\") |> print() #>     Card     Suit #> 1    Ace   Hearts #> 5      5   Hearts #> 11  Jack   Hearts #> 12 Queen   Hearts #> 30     4    Clubs #> 31     5    Clubs #> 32     6    Clubs #> 20     7 Diamonds #> 23    10 Diamonds #> 25 Queen Diamonds #> 41     2   Spades #> 42     3   Spades"},{"path":"/reference/DeckOfCards4.html","id":null,"dir":"Reference","previous_headings":"","what":"Deck of Cards Class — DeckOfCards4","title":"Deck of Cards Class — DeckOfCards4","text":"class inheriting SetOfCards, representing standard deck playing cards.","code":""},{"path":"/reference/DeckOfCards4.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Deck of Cards Class — DeckOfCards4","text":"setofcards data frame containing deck cards suits.","code":""},{"path":"/reference/DiscardPile4.html","id":null,"dir":"Reference","previous_headings":"","what":"Discard S4 Pile Class — DiscardPile4","title":"Discard S4 Pile Class — DiscardPile4","text":"class representing pile cards discarded.","code":""},{"path":"/reference/DiscardPile4.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Discard S4 Pile Class — DiscardPile4","text":"discard SetOfCards object representing discarded cards.","code":""},{"path":"/reference/PlayerHand4.html","id":null,"dir":"Reference","previous_headings":"","what":"Player Hand Class — PlayerHand4","title":"Player Hand Class — PlayerHand4","text":"class representing player's hand cards.","code":""},{"path":"/reference/PlayerHand4.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Player Hand Class — PlayerHand4","text":"name character string representing player's name. hand SetOfCards object representing player's hand.","code":""},{"path":"/reference/SetOfCards.html","id":null,"dir":"Reference","previous_headings":"","what":"Set of Cards Class — SetOfCards","title":"Set of Cards Class — SetOfCards","text":"class representing set playing cards.","code":""},{"path":"/reference/SetOfCards.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"Set of Cards Class — SetOfCards","text":"setofcards data frame containing data frame set cards suits.","code":""},{"path":"/reference/SumNa.html","id":null,"dir":"Reference","previous_headings":"","what":"Count the number of missing elements of a vector — SumNa","title":"Count the number of missing elements of a vector — SumNa","text":"Count number missing elements vector, allows user define count NA R function vectorized.","code":""},{"path":"/reference/SumNa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count the number of missing elements of a vector — SumNa","text":"","code":"SumNa(col, na_list = NULL)"},{"path":"/reference/SumNa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count the number of missing elements of a vector — SumNa","text":"col column vector data na_list list elements allow SumNa think NA","code":""},{"path":"/reference/SumNa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count the number of missing elements of a vector — SumNa","text":"numeric value representing number missing values","code":""},{"path":"/reference/SumNa.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count the number of missing elements of a vector — SumNa","text":"","code":"data <- data.frame(  col1 = c(1, NA, 3, \"NA\"),  col2 = c(\"A\", \"B\", \"C\", \"D\")  ) SumNa(data$col1) #> [1] 1 SumNa(data$col1, na_list = c(\"NA\")) #> [1] 2"},{"path":"/reference/addition.html","id":null,"dir":"Reference","previous_headings":"","what":"Add two numbers — addition","title":"Add two numbers — addition","text":"Add two numbers","code":""},{"path":"/reference/addition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add two numbers — addition","text":"","code":"addition(x, y)"},{"path":"/reference/addition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add two numbers — addition","text":"x First number y Second number","code":""},{"path":"/reference/addition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add two numbers — addition","text":"Sum x y","code":""},{"path":"/reference/addition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add two numbers — addition","text":"","code":"addition(3, 5) #> [1] 8 addition(-4, 6) #> [1] 2 addition(exp(pi*complex(1,0,1)), 1) # close enough to 0 #> [1] 0+1.224647e-16i"},{"path":"/reference/coin_flip.html","id":null,"dir":"Reference","previous_headings":"","what":"Coin Flip — coin_flip","title":"Coin Flip — coin_flip","text":"function simulates flipping coin.","code":""},{"path":"/reference/coin_flip.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coin Flip — coin_flip","text":"","code":"coin_flip(flips = 1, coins = 1)"},{"path":"/reference/coin_flip.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coin Flip — coin_flip","text":"flips number times flip coin. coins number coins flip.","code":""},{"path":"/reference/coin_flip.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coin Flip — coin_flip","text":"vector integers representing results coin flips.","code":""},{"path":"/reference/coin_flip.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coin Flip — coin_flip","text":"","code":"coin_flip(1, 1) #> [1] \"Tails\" coin_flip(10, 1) #>  [1] \"Heads\" \"Heads\" \"Heads\" \"Heads\" \"Tails\" \"Heads\" \"Tails\" \"Heads\" \"Heads\" #> [10] \"Heads\" coin_flip(1, 10) #>  [1] \"Heads\" \"Tails\" \"Heads\" \"Tails\" \"Heads\" \"Heads\" \"Heads\" \"Heads\" \"Tails\" #> [10] \"Heads\""},{"path":"/reference/createBootDeck.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create a Boot of S4 DeckOfCards4. — createBootDeck","title":"Function to create a Boot of S4 DeckOfCards4. — createBootDeck","text":"Function create Boot S4 DeckOfCards4.","code":""},{"path":"/reference/createBootDeck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create a Boot of S4 DeckOfCards4. — createBootDeck","text":"","code":"createBootDeck(num_decks = 2, use_jokers = FALSE)"},{"path":"/reference/createBootDeck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create a Boot of S4 DeckOfCards4. — createBootDeck","text":"use_jokers logical value indicating whether include jokers deck.","code":""},{"path":"/reference/createBootDeck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create a Boot of S4 DeckOfCards4. — createBootDeck","text":"data frame representing standard deck playing cards.","code":""},{"path":"/reference/createBootDeck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create a Boot of S4 DeckOfCards4. — createBootDeck","text":"","code":"createBootDeck() #>      Card     Suit #> 38  Queen    Clubs #> 44      5   Spades #> 10     10   Hearts #> 28      2    Clubs #> 29      3    Clubs #> 48      9   Spades #> 43      4   Spades #> 50   Jack   Spades #> 21      8 Diamonds #> 6       6   Hearts #> 8       8   Hearts #> 3       3   Hearts #> 9       9   Hearts #> 33      7    Clubs #> 14    Ace Diamonds #> 5       5   Hearts #> 16      3 Diamonds #> 35      9    Clubs #> 39   King    Clubs #> 15      2 Diamonds #> 31      5    Clubs #> 51  Queen   Spades #> 2       2   Hearts #> 26   King Diamonds #> 37   Jack    Clubs #> 42      3   Spades #> 22      9 Diamonds #> 27    Ace    Clubs #> 11   Jack   Hearts #> 1     Ace   Hearts #> 34      8    Clubs #> 32      6    Clubs #> 46      7   Spades #> 49     10   Spades #> 52   King   Spades #> 30      4    Clubs #> 41      2   Spades #> 17      4 Diamonds #> 13   King   Hearts #> 40    Ace   Spades #> 36     10    Clubs #> 18      5 Diamonds #> 12  Queen   Hearts #> 23     10 Diamonds #> 7       7   Hearts #> 20      7 Diamonds #> 4       4   Hearts #> 24   Jack Diamonds #> 47      8   Spades #> 25  Queen Diamonds #> 45      6   Spades #> 19      6 Diamonds #> 381 Queen    Clubs #> 441     5   Spades #> 101    10   Hearts #> 281     2    Clubs #> 291     3    Clubs #> 481     9   Spades #> 431     4   Spades #> 501  Jack   Spades #> 211     8 Diamonds #> 61      6   Hearts #> 81      8   Hearts #> 310     3   Hearts #> 91      9   Hearts #> 331     7    Clubs #> 141   Ace Diamonds #> 53      5   Hearts #> 161     3 Diamonds #> 351     9    Clubs #> 391  King    Clubs #> 151     2 Diamonds #> 311     5    Clubs #> 511 Queen   Spades #> 210     2   Hearts #> 261  King Diamonds #> 371  Jack    Clubs #> 421     3   Spades #> 221     9 Diamonds #> 271   Ace    Clubs #> 111  Jack   Hearts #> 110   Ace   Hearts #> 341     8    Clubs #> 321     6    Clubs #> 461     7   Spades #> 491    10   Spades #> 521  King   Spades #> 301     4    Clubs #> 411     2   Spades #> 171     4 Diamonds #> 131  King   Hearts #> 401   Ace   Spades #> 361    10    Clubs #> 181     5 Diamonds #> 121 Queen   Hearts #> 231    10 Diamonds #> 71      7   Hearts #> 201     7 Diamonds #> 410     4   Hearts #> 241  Jack Diamonds #> 471     8   Spades #> 251 Queen Diamonds #> 451     6   Spades #> 191     6 Diamonds"},{"path":"/reference/createDeck.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to create a standard deck dataframe. — createDeck","title":"Function to create a standard deck dataframe. — createDeck","text":"Function create standard deck dataframe.","code":""},{"path":"/reference/createDeck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to create a standard deck dataframe. — createDeck","text":"","code":"createDeck(use_jokers = FALSE)"},{"path":"/reference/createDeck.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to create a standard deck dataframe. — createDeck","text":"use_jokers logical value indicating whether include jokers deck.","code":""},{"path":"/reference/createDeck.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to create a standard deck dataframe. — createDeck","text":"data frame representing standard deck playing cards.","code":""},{"path":"/reference/createDeck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to create a standard deck dataframe. — createDeck","text":"","code":"createDeck() #>     Card     Suit #> 38 Queen    Clubs #> 44     5   Spades #> 10    10   Hearts #> 28     2    Clubs #> 29     3    Clubs #> 48     9   Spades #> 43     4   Spades #> 50  Jack   Spades #> 21     8 Diamonds #> 6      6   Hearts #> 8      8   Hearts #> 3      3   Hearts #> 9      9   Hearts #> 33     7    Clubs #> 14   Ace Diamonds #> 5      5   Hearts #> 16     3 Diamonds #> 35     9    Clubs #> 39  King    Clubs #> 15     2 Diamonds #> 31     5    Clubs #> 51 Queen   Spades #> 2      2   Hearts #> 26  King Diamonds #> 37  Jack    Clubs #> 42     3   Spades #> 22     9 Diamonds #> 27   Ace    Clubs #> 11  Jack   Hearts #> 1    Ace   Hearts #> 34     8    Clubs #> 32     6    Clubs #> 46     7   Spades #> 49    10   Spades #> 52  King   Spades #> 30     4    Clubs #> 41     2   Spades #> 17     4 Diamonds #> 13  King   Hearts #> 40   Ace   Spades #> 36    10    Clubs #> 18     5 Diamonds #> 12 Queen   Hearts #> 23    10 Diamonds #> 7      7   Hearts #> 20     7 Diamonds #> 4      4   Hearts #> 24  Jack Diamonds #> 47     8   Spades #> 25 Queen Diamonds #> 45     6   Spades #> 19     6 Diamonds"},{"path":"/reference/deck.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard Deck of Cards — deck","title":"Standard Deck of Cards — deck","text":"standard deck cards including jokers, stored internally use package functions.","code":""},{"path":"/reference/deck.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard Deck of Cards — deck","text":"","code":"deck"},{"path":"/reference/deck.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Standard Deck of Cards — deck","text":"data frame 54 rows 3 variables: Card card rank, ranging Ace King, including Joker. Suit card suit: Hearts, Diamonds, Clubs, Spades.","code":""},{"path":"/reference/deck.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Standard Deck of Cards — deck","text":"Generated using script 'data-raw/prepare_deck.R'","code":""},{"path":"/reference/deck.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Standard Deck of Cards — deck","text":"","code":"# To access the 'deck' data set within the package:   data(\"deck\", package = \"RPackage2\")   # now deck is available for use in the function   head(deck) #>     Card     Suit #> 33     7    Clubs #> 43     4   Spades #> 54 Joker Diamonds #> 15     2 Diamonds #> 46     7   Spades #> 3      3   Hearts"},{"path":"/reference/draw.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw Cards from a Set — draw","title":"Draw Cards from a Set — draw","text":"Draws specified number cards set.","code":""},{"path":"/reference/draw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw Cards from a Set — draw","text":"","code":"draw(drawer, draw_from, number)"},{"path":"/reference/draw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw Cards from a Set — draw","text":"drawer PlayerHand4 object SetOfCards object. draw_from SetOfCards object another players hand. number number cards draw.","code":""},{"path":"/reference/draw.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw Cards from a Set — draw","text":"list containing drawn cards updated SetOfCards object.","code":""},{"path":"/reference/draw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw Cards from a Set — draw","text":"","code":"my_deck <- new(\"DeckOfCards4\", setofcards = createDeck()) result <- draw(my_deck, 5) #> Error: unable to find an inherited method for function ‘draw’ for signature ‘drawer = \"DeckOfCards4\", draw_from = \"numeric\", number = \"missing\"’ drawn_cards <- result$drawn #> Error in eval(expr, envir, enclos): object 'result' not found drawn_cards #> Error in eval(expr, envir, enclos): object 'drawn_cards' not found my_deck <- result$object #> Error in eval(expr, envir, enclos): object 'result' not found my_deck #> An object of class \"DeckOfCards4\" #> Slot \"setofcards\": #>     Card     Suit #> 38 Queen    Clubs #> 44     5   Spades #> 10    10   Hearts #> 28     2    Clubs #> 29     3    Clubs #> 48     9   Spades #> 43     4   Spades #> 50  Jack   Spades #> 21     8 Diamonds #> 6      6   Hearts #> 8      8   Hearts #> 3      3   Hearts #> 9      9   Hearts #> 33     7    Clubs #> 14   Ace Diamonds #> 5      5   Hearts #> 16     3 Diamonds #> 35     9    Clubs #> 39  King    Clubs #> 15     2 Diamonds #> 31     5    Clubs #> 51 Queen   Spades #> 2      2   Hearts #> 26  King Diamonds #> 37  Jack    Clubs #> 42     3   Spades #> 22     9 Diamonds #> 27   Ace    Clubs #> 11  Jack   Hearts #> 1    Ace   Hearts #> 34     8    Clubs #> 32     6    Clubs #> 46     7   Spades #> 49    10   Spades #> 52  King   Spades #> 30     4    Clubs #> 41     2   Spades #> 17     4 Diamonds #> 13  King   Hearts #> 40   Ace   Spades #> 36    10    Clubs #> 18     5 Diamonds #> 12 Queen   Hearts #> 23    10 Diamonds #> 7      7   Hearts #> 20     7 Diamonds #> 4      4   Hearts #> 24  Jack Diamonds #> 47     8   Spades #> 25 Queen Diamonds #> 45     6   Spades #> 19     6 Diamonds #>  nrow(my_deck) + nrow(drawn_cards) #> Error in eval(expr, envir, enclos): object 'drawn_cards' not found"},{"path":"/reference/features_percent_miss.html","id":null,"dir":"Reference","previous_headings":"","what":"Features Percent Missing — features_percent_miss","title":"Features Percent Missing — features_percent_miss","text":"Count number missing elements column data frame. Allows threshold setting easily find columns higher percent missing data. Allows users supply list things might also considered missing. function creates bar plot showing percentage complete values feature data frame tibble.","code":""},{"path":"/reference/features_percent_miss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Features Percent Missing — features_percent_miss","text":"","code":"features_percent_miss(data, percent_miss = 0, na_list = NULL)  # S3 method for features_percent_miss plot(x, add.label = TRUE)"},{"path":"/reference/features_percent_miss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Features Percent Missing — features_percent_miss","text":"data data frame tibble something become one percent_miss numeric 0 1 filter columns missing value na_list list elements allow SumNa think NA x object class 'features_percent_miss' returned features_percent_miss function. add.label logical add percent labels graph, defaults TRUE","code":""},{"path":"/reference/features_percent_miss.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Features Percent Missing — features_percent_miss","text":"tibble (data frame) columns: feature, SumNa (sum NA entries), SumComp, PctNa, PctComp ggplot object representing bar plot.","code":""},{"path":"/reference/features_percent_miss.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Features Percent Missing — features_percent_miss","text":"","code":"mtcars |>  missing_at_random(1/3) |>  features_percent_miss() #> # A tibble: 11 × 5 #>    feature SumNa SumComp  PctNa PctComp #>    <chr>   <int>   <int>  <dbl>   <dbl> #>  1 cyl        14      18 0.438    0.562 #>  2 carb       14      18 0.438    0.562 #>  3 vs         13      19 0.406    0.594 #>  4 disp       12      20 0.375    0.625 #>  5 am         12      20 0.375    0.625 #>  6 drat       11      21 0.344    0.656 #>  7 qsec       10      22 0.312    0.688 #>  8 gear       10      22 0.312    0.688 #>  9 mpg         8      24 0.25     0.75  #> 10 wt          7      25 0.219    0.781 #> 11 hp          3      29 0.0938   0.906   mtcars |>  missing_at_random(1/3) |>  features_percent_miss(na_list = c(\"\",\" \",\"NA\")) |>  plot()"},{"path":"/reference/missing_at_random.html","id":null,"dir":"Reference","previous_headings":"","what":"Missing data at random — missing_at_random","title":"Missing data at random — missing_at_random","text":"function randomly assign missing values dataset","code":""},{"path":"/reference/missing_at_random.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missing data at random — missing_at_random","text":"","code":"missing_at_random(data, prob = runif(1, 1/5, 1/3))"},{"path":"/reference/missing_at_random.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missing data at random — missing_at_random","text":"data dataset prob probability missing value assigned cell","code":""},{"path":"/reference/missing_at_random.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missing data at random — missing_at_random","text":"dataset missing values randomly assigned given probability","code":""},{"path":"/reference/missing_at_random.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missing data at random — missing_at_random","text":"","code":"mtcars_miss_at_random <- missing_at_random(mtcars)"},{"path":"/reference/missmap.html","id":null,"dir":"Reference","previous_headings":"","what":"Missingness Map — missmap","title":"Missingness Map — missmap","text":"function creates missingness map dataframe. map shows missingness cell dataframe.","code":""},{"path":"/reference/missmap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Missingness Map — missmap","text":"","code":"missmap(df, na_list = NULL, row_order = FALSE)"},{"path":"/reference/missmap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Missingness Map — missmap","text":"df dataframe na_list list elements allow SumNa think NA row_order logical value determine rows ordered number missing values","code":""},{"path":"/reference/missmap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Missingness Map — missmap","text":"ggplot object","code":""},{"path":"/reference/missmap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Missingness Map — missmap","text":"","code":"data <- data.frame( col1 = c(1, NA, 3, \"NA\"), col2 = c(\"A\", \"B\", \"C\", \"D\") ) missmap(data)   mtcars |>   missing_at_random() |>   missmap()"},{"path":"/reference/multiplication.html","id":null,"dir":"Reference","previous_headings":"","what":"Multiply two numbers — multiplication","title":"Multiply two numbers — multiplication","text":"Multiply two numbers","code":""},{"path":"/reference/multiplication.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multiply two numbers — multiplication","text":"","code":"multiplication(x, y)"},{"path":"/reference/multiplication.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multiply two numbers — multiplication","text":"x First number y Second number","code":""},{"path":"/reference/multiplication.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multiply two numbers — multiplication","text":"Product x y","code":""},{"path":"/reference/multiplication.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multiply two numbers — multiplication","text":"","code":"multiplication(3, 5) #> [1] 15"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"/reference/roll_dice.html","id":null,"dir":"Reference","previous_headings":"","what":"Roll a dice — roll_dice","title":"Roll a dice — roll_dice","text":"function simulates rolling dice.","code":""},{"path":"/reference/roll_dice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Roll a dice — roll_dice","text":"","code":"roll_dice(sides = 6, rolls = 1)"},{"path":"/reference/roll_dice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Roll a dice — roll_dice","text":"sides number sides dice. rolls number times roll dice.","code":""},{"path":"/reference/roll_dice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Roll a dice — roll_dice","text":"vector integers representing results dice rolls.","code":""},{"path":"/reference/roll_dice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Roll a dice — roll_dice","text":"","code":"roll_dice(6, 1) #> [1] 3 roll_dice(6, 10) #>  [1] 5 2 1 5 2 4 5 6 4 3 roll_dice(20, 1) #> [1] 17"},{"path":"/reference/shuffle.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffle a Set of Cards — shuffle","title":"Shuffle a Set of Cards — shuffle","text":"Randomly permutes cards set.","code":""},{"path":"/reference/shuffle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffle a Set of Cards — shuffle","text":"","code":"shuffle(object)"},{"path":"/reference/shuffle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffle a Set of Cards — shuffle","text":"object SetOfCards object.","code":""},{"path":"/reference/shuffle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shuffle a Set of Cards — shuffle","text":"shuffled SetOfCards object.","code":""},{"path":"/reference/shuffle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shuffle a Set of Cards — shuffle","text":"","code":"my_deck <- new(\"DeckOfCards4\", setofcards = createDeck()) my_deck <- shuffle(my_deck)"},{"path":"/reference/solitaire.html","id":null,"dir":"Reference","previous_headings":"","what":"Sort a Set of Cards in Solitaire Order — solitaire","title":"Sort a Set of Cards in Solitaire Order — solitaire","text":"Sorts cards set suit rank specific order.","code":""},{"path":"/reference/solitaire.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sort a Set of Cards in Solitaire Order — solitaire","text":"","code":"solitaire(object)"},{"path":"/reference/solitaire.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sort a Set of Cards in Solitaire Order — solitaire","text":"object SetOfCards object.","code":""},{"path":"/reference/solitaire.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sort a Set of Cards in Solitaire Order — solitaire","text":"SetOfCards object sorted solitaire order.","code":""},{"path":"/reference/solitaire.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sort a Set of Cards in Solitaire Order — solitaire","text":"","code":"my_deck <- new(\"DeckOfCards4\", setofcards = createDeck()) my_deck_sorted <- solitaire(my_deck) my_deck_sorted #> An object of class \"DeckOfCards4\" #> Slot \"setofcards\": #>     Card     Suit #> 1    Ace   Hearts #> 2      2   Hearts #> 3      3   Hearts #> 4      4   Hearts #> 5      5   Hearts #> 6      6   Hearts #> 7      7   Hearts #> 8      8   Hearts #> 9      9   Hearts #> 10    10   Hearts #> 11  Jack   Hearts #> 12 Queen   Hearts #> 13  King   Hearts #> 27   Ace    Clubs #> 28     2    Clubs #> 29     3    Clubs #> 30     4    Clubs #> 31     5    Clubs #> 32     6    Clubs #> 33     7    Clubs #> 34     8    Clubs #> 35     9    Clubs #> 36    10    Clubs #> 37  Jack    Clubs #> 38 Queen    Clubs #> 39  King    Clubs #> 14   Ace Diamonds #> 15     2 Diamonds #> 16     3 Diamonds #> 17     4 Diamonds #> 18     5 Diamonds #> 19     6 Diamonds #> 20     7 Diamonds #> 21     8 Diamonds #> 22     9 Diamonds #> 23    10 Diamonds #> 24  Jack Diamonds #> 25 Queen Diamonds #> 26  King Diamonds #> 40   Ace   Spades #> 41     2   Spades #> 42     3   Spades #> 43     4   Spades #> 44     5   Spades #> 45     6   Spades #> 46     7   Spades #> 47     8   Spades #> 48     9   Spades #> 49    10   Spades #> 50  Jack   Spades #> 51 Queen   Spades #> 52  King   Spades #>"}]
